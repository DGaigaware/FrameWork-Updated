package com.avaya.smgr.gls;
/*
 * Test Case related to Roles UI page
 */
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import utility.UserAction;


public class Roles{
	boolean b=true,match=false;;
	UserAction action =null;
	Properties locator=null;
	Properties read=null;
	Properties input=null;
	public WebDriver driver;
	private static final String IDEN_Roles_Grid = "//*[@class='jstree-closed']";
	private static final String IDEN_Roles_Sysadmin = ".//*[@id='node_System_white-space_Administrator']/ins";

@BeforeClass(alwaysRun=true)
public void BeforeClasssetup() throws IOException, InterruptedException{

	
 }
@BeforeMethod(alwaysRun=true)
	public void setup() throws IOException, InterruptedException{
		action = new UserAction();
		locator=new Properties();
	   	input=new Properties();
	    locator.load(new FileInputStream(System.getProperty("user.dir") + "\\Third Party\\objectRepository\\OR.properties"));
	    input.load(new FileInputStream(System.getProperty("user.dir") + "\\Third Party\\testData\\INPUT.properties"));
		action.login(input.getProperty("UserId"),input.getProperty("Password"),action);
   }

@Test(description="Verification of buttons states are showing correctly")
public void GLSRolesBtns() throws Exception{
	action.RefreshPage();
	
	//Navigate to SMGR,Groups & Roles,Roles
	action.ClickLink(locator.getProperty("Groups_Roles"));
	action.ClickLink(locator.getProperty("Roles"));
	action.SwithchFrame("iframe0");
	action.driver.switchTo().frame("ucm_roles_iframe");
	//Verify that the title name is showing correctly
	action.VerifyTitle(locator.getProperty("Roles"));
	//Verify the button states correctly(Enabled for New and Delete)
	action.VerifyEnableButton(locator.getProperty("Roles.New"));
	action.VerifyEnableButton(locator.getProperty("Roles.Delete"));
}
@Test(description="Verification of error message when Role name is empty")
public void GLSSysRolenameEmpty() throws Exception{
	action.RefreshPage();
	String RoleName=input.getProperty("UpdatedName");
	//Navigate to SMGR,Groups & Roles,Roles
	action.ClickLink(locator.getProperty("Groups_Roles"));
	action.ClickLink(locator.getProperty("Roles"));
	action.SwithchFrame("iframe0");
	action.driver.switchTo().frame("ucm_roles_iframe");
	//Select System administrators Role
	action.ClickButton(locator.getProperty("System_Administrator"));
	//Click on the New button
	action.ClickButton(locator.getProperty("Roles.New"));
	action.WaitForObj(locator.getProperty("Roles.Name"));
	//Enter role name and Description
	//action.entertext(locator.getProperty("Roles.Name"), RoleName);
	action.entertext(locator.getProperty("Roles.Desc"), RoleName);
	//Click on the commit and Continue button
	action.ClickButton(locator.getProperty("Roles.CommitContinue"));
	Thread.sleep(2000);
	//Verification of error message when group name is empty
	action.VerifyStringValue("The role name entered is empty");
	Thread.sleep(1000);
}
@Test(description="Verification of error message when Role Description is empty")
public void GLSSysRoleDescEmpty() throws Exception{
	action.RefreshPage();
	String RoleName=input.getProperty("UpdatedName");
	//Navigate to SMGR,Groups & Roles,Roles
	action.ClickLink(locator.getProperty("Groups_Roles"));
	action.ClickLink(locator.getProperty("Roles"));
	action.SwithchFrame("iframe0");
	action.driver.switchTo().frame("ucm_roles_iframe");
	//Select System administrators Role
	action.ClickButton(locator.getProperty("System_Administrator"));
	//Click on the New button
	action.ClickButton(locator.getProperty("Roles.New"));
	action.WaitForObj(locator.getProperty("Roles.Name"));
	//Enter role name. Make sure Role Description is empty
	action.entertext(locator.getProperty("Roles.Name"), RoleName);
	//Click on the commit and Continue button
	action.ClickButton(locator.getProperty("Roles.CommitContinue"));
	Thread.sleep(2000);
	//Verification of error message when group name is empty
	action.VerifyStringValue("The role description entered is empty.");
	Thread.sleep(1000);
}

@Test(description="Verify that the Sysadmin Role  is created successfully",priority=1,groups={"Sanity"})
public void GLSASysRoleadded() throws Exception{
	action.RefreshPage();
	int flag=0;
	String RoleName=input.getProperty("UpdatedName");
	//Navigate to SMGR,Groups & Roles,Roles
	action.ClickLink(locator.getProperty("Groups_Roles"));
	action.ClickLink(locator.getProperty("Roles"));
	action.SwithchFrame("iframe0");
	action.driver.switchTo().frame("ucm_roles_iframe");
	//Select System administrators Role
	action.ClickButton(locator.getProperty("System_Administrator"));
	//Click on the New button
	action.ClickButton(locator.getProperty("Roles.New"));
	action.WaitForObj(locator.getProperty("Roles.Name"));
	//Enter role name and Description
	action.entertext(locator.getProperty("Roles.Name"), RoleName);
	action.entertext(locator.getProperty("Roles.Desc"), RoleName);
	//Click on the commit and Continue button
	action.ClickButton(locator.getProperty("Roles.CommitContinue"));
	//Click on the add mappings
	action.ClickButton(locator.getProperty("Roles.Addmap"));
	action.WaitForObj(locator.getProperty("Roles.ElementType"));
	//Select Element as SMGR Core Services
	action.SelectFromdropDown(locator.getProperty("Roles.ElementType"), "SMGR Core Services");
	action.SelectFromdropDown(locator.getProperty("Roles.Instance"), "All");
	action.ClickButton(locator.getProperty("Roles.Next"));
	action.WaitForObj(locator.getProperty("Roles.Template"));
	//Select Template for permission
	action.SelectFromdropDown(locator.getProperty("Roles.Template"), "System Administrator");
	//Click on the commit button
	action.ClickButton(locator.getProperty("Roles.commit"));
	action.WaitForObj(locator.getProperty("Roles.commit1"));
	action.ClickButton(locator.getProperty("Roles.commit1"));
	action.WaitForTitle(locator.getProperty("Roles"));
	//Verification of Role is created successfully
	//Select System administrators Role
	//action.driver.findElement(By.xpath(".//*[@id='node_System_white-space_Administrator']/ins")).click();
		//Thread.sleep(2000);
		//Click on the New button
		List<WebElement> totalRows = action.driver.findElements(By.xpath(IDEN_Roles_Grid));
		for (WebElement webElement : totalRows) { 
			b=webElement.getText().contains(RoleName);
			if(b){
				Assert.assertTrue(b);
				flag=1;
				break;
			}
		}
		if(flag==0){
			Assert.assertTrue(b);
			
		}


}

@Test(description="Verify that user is created by using Role successfully",priority=2)
public void GLSBUserCreate() throws Exception{
	action.RefreshPage();
	action.ClickLink(locator.getProperty("User_Management"));
	action.WaitForTitle(locator.getProperty("User_Management"));
	action.ClickLink(locator.getProperty("Manage_Users"));
	String RoleName=input.getProperty("UpdatedName");
	action.SwithchFrame("iframe0");
	//Click on New button
	action.DoubleClickButton(locator.getProperty("Users.New"));
	action.WaitForTitle(locator.getProperty("New_User_Profile"));
	//Enter the last name,First name,Login name
	action.EntertextUsingKey(locator.getProperty("Lastname"),input.getProperty("UsersLastname"),Keys.TAB);
	WebDriverWait wait=new WebDriverWait(action.driver,20);
	wait.until(ExpectedConditions.textToBePresentInElementValue(By.xpath(locator.getProperty("Lastnameascii")),input.getProperty("UsersLastname")));
	action.EntertextUsingKey(locator.getProperty("Firstname"),input.getProperty("UsersFirstname"),Keys.TAB);
	wait.until(ExpectedConditions.textToBePresentInElementValue(By.xpath(locator.getProperty("Firstnameascii")),input.getProperty("UsersFirstname")));
	action.EntertextUsingKey(locator.getProperty("Loginname"),input.getProperty("Role.user"),Keys.TAB);
	Thread.sleep(2000);
	action.entertext(locator.getProperty("Users.Password"), input.getProperty("Role.user"));
	action.entertext(locator.getProperty("Users.CnfPassword"), input.getProperty("Role.user"));
	action.ClickLinkByxpath(locator.getProperty("Membership"));
	action.WaitForObj(locator.getProperty("User.assignRole"));
	action.ClickButton(locator.getProperty("User.assignRole"));
	action.WaitForTitle(locator.getProperty("Assign_Roles"));
	action.ClickButton(locator.getProperty("Users.Name"));
	Thread.sleep(2000);
	List<WebElement> totalRows = action.driver.findElements(By.xpath(".//*[@id='tblAdditionalRoles_core_table_content']/tbody/tr"));
	//System.out.println("Total Rows"+totalRows.size());

	for (int i=2;i<=totalRows.size();i++){
    	String sValue = null;
    	sValue = action.driver.findElement(By.xpath(".//*[@id='tblAdditionalRoles_core_table_content']/tbody/tr["+i+"]/td[3]")).getText();
    	if(sValue.contains(RoleName)){
   			WebElement sRowValue= action.driver.findElement(By.xpath(".//*[@id='tblAdditionalRoles:"+(i-2)+"']"));
   			sRowValue.click();
   			Thread.sleep(1000);
   		break;
    }
	}
	//Click on the Select button
	action.ClickButton(locator.getProperty("Users.AssingRole.Select"));
	action.WaitForObj(locator.getProperty("Users.Commit"));
	action.DoubleClickButton(locator.getProperty("Users.Commit"));
	action.WaitForTitle(locator.getProperty("User_Management"));
}
@Test(description="Verification login succcessfully when login with user Credentials",priority=3)
public void GLSCRolesUser() throws Exception{
	action.RefreshPage();
	action.ClickButton(locator.getProperty("LogOff"));
	String EmailId=input.getProperty("Loginname");
	//Navigate to SMGR,Groups & Roles,Roles
	action.entertext(locator.getProperty("UserId"), input.getProperty("Role.user"));
	action.entertext(locator.getProperty("Password"), input.getProperty("Role.user"));
	action.ClickButton(locator.getProperty("LogOn"));
	action.WaitForObj(locator.getProperty("UserId"));
	action.entertext(locator.getProperty("UserId"), input.getProperty("Password"));
	action.entertext(locator.getProperty("Password"), input.getProperty("Password"));
	action.ClickButton(locator.getProperty("Password.change"));
	action.WaitForObj(locator.getProperty("LoginUser"));
	 String Username=action.driver.findElement(By.xpath(locator.getProperty("LoginUser"))).getText();
	 b=Username.contains(input.getProperty("Role.user"));
	 Assert.assertTrue(b);

}

@Test(description="Verify that enable links are showing for created user",priority=3)
public void GLSECreateUser() throws Exception{
	action.RefreshPage();
	action.ClickButton(locator.getProperty("LogOff"));
	action.entertext(locator.getProperty("UserId"), input.getProperty("Role.user"));
	action.entertext(locator.getProperty("Password"), input.getProperty("Password"));
	action.ClickButton(locator.getProperty("LogOn"));
	action.WaitForObj(locator.getProperty("LoginUser"));
		//Navigate to SMGR,User Management,Manage Users
	action.ClickLink(locator.getProperty("User_Management"));
}

@Test(description="Verify that role is update successfully",priority=5)
public void GLSFUpdate() throws Exception{
	action.RefreshPage();
	int flag = 0;
	//Navigate to SMGR,Groups & Roles,Roles
	action.ClickLink(locator.getProperty("Groups_Roles"));
	action.ClickLink(locator.getProperty("Roles"));
	action.SwithchFrame("iframe0");
	action.driver.switchTo().frame("ucm_roles_iframe");
	//Select System administrators Role
	action.ClickButton(locator.getProperty("Roles.SysIcon"));
	//Select the 
	List<WebElement> totalRows = action.driver.findElements(By.xpath(IDEN_Roles_Grid));
	for (int i=1;i<=totalRows.size();i++){
    	String sValue = null;
    	sValue = action.driver.findElement(By.xpath("html/body/div[1]/table/tbody/tr[2]/td[1]/div/div[2]/ul/li/ul/li/ul/li["+i+"]/a")).getText();
    	if(sValue.contains(input.getProperty("UpdatedName"))){
   			WebElement sRowValue= action.driver.findElement(By.xpath("html/body/div[1]/table/tbody/tr[2]/td[1]/div/div[2]/ul/li/ul/li/ul/li["+i+"]/a"));
   			sRowValue.click();
   			Thread.sleep(1000);
   		break;
    }
    	
			

	}
	
	action.ClickButton(locator.getProperty("Role.Edit"));
	action.WaitForObj(locator.getProperty("Role.Edit.Name"));
	action.ClearText(locator.getProperty("Role.Edit.Name"));
	action.entertext(locator.getProperty("Role.Edit.Name"), input.getProperty("Uname"));
	action.ClickButton(locator.getProperty("Role.Edit.Commit"));
	action.WaitForObj(locator.getProperty("Roles.New"));
	List<WebElement> totalRows1 = action.driver.findElements(By.xpath(IDEN_Roles_Grid));
	for (int i=1;i<=totalRows1.size();i++){
    	String sValue = null;
    	sValue = action.driver.findElement(By.xpath("html/body/div[1]/table/tbody/tr[2]/td[1]/div/div[2]/ul/li/ul/li/ul/li["+i+"]/a")).getText();
    	b=sValue.contains(input.getProperty("Uname"));
    	if(b){
    		Assert.assertTrue(b);
			Thread.sleep(1000);
			flag=1;
			break;

    }
	}
	if(flag==0){
		Assert.assertTrue(b);
	}
}
@Test(description="Verify that role deleted successfully",priority=6)
public void GLSGUserDelete() throws Exception{
	action.RefreshPage();
	int flag=0;
	String RoleName=input.getProperty("Uname");
	//Navigate to SMGR,Groups & Roles,Roles
	action.ClickLink(locator.getProperty("Groups_Roles"));
	action.ClickLink(locator.getProperty("Roles"));
	action.SwithchFrame("iframe0");
	action.driver.switchTo().frame("ucm_roles_iframe");
	//Select System administrators Role
	action.ClickButton(locator.getProperty("Roles.SysIcon"));
	//Select the 
	List<WebElement> totalRows = action.driver.findElements(By.xpath(IDEN_Roles_Grid));
	for (int i=1;i<=totalRows.size();i++){
    	String sValue = null;
    	sValue = action.driver.findElement(By.xpath("html/body/div[1]/table/tbody/tr[2]/td[1]/div/div[2]/ul/li/ul/li/ul/li["+i+"]/a")).getText();
    	if(sValue.contains(RoleName)){
   			WebElement sRowValue= action.driver.findElement(By.xpath("html/body/div[1]/table/tbody/tr[2]/td[1]/div/div[2]/ul/li/ul/li/ul/li["+i+"]/a"));
   			sRowValue.click();
   			Thread.sleep(1000);
   		break;
    }
    	

	}
	
	action.ClickButton(locator.getProperty("Roles.Delete"));
	action.WaitForObj(locator.getProperty("Roles.Delete.Cnf"));
	action.ClickButton(locator.getProperty("Roles.Delete.Cnf"));
	action.WaitForObj(locator.getProperty("Roles.SysIcon"));
	action.ClickButton(locator.getProperty("Roles.SysIcon"));
	action.WaitForObj(locator.getProperty("Roles.SysIcon"));
	List<WebElement> totalRows1 = action.driver.findElements(By.xpath(IDEN_Roles_Grid));
	for (int i=1;i<=totalRows1.size();i++){
    	String sValue = null;
    	sValue = action.driver.findElement(By.xpath("html/body/div[1]/table/tbody/tr[2]/td[1]/div/div[2]/ul/li/ul/li/ul/li["+i+"]/a")).getText();
    	b=sValue.contains(input.getProperty("Uname"));
    	if(b){
    		Assert.assertFalse(b);
			Thread.sleep(1000);
			flag=1;
			break;

    }
    	
		//Assert.assertFalse(b);
		//Thread.sleep(1000);
	}	
	if(flag==0){
		Assert.assertFalse(b);
		Thread.sleep(1000);

	}
}


	@AfterMethod(alwaysRun=true)
	public void Screenshots(ITestResult result) throws IOException, InterruptedException{
	  
	action.Screenshot(result, action);
	action.logout(action);
	}
	@AfterClass(alwaysRun=true)
	public void close() throws IOException, InterruptedException{
	  
	
	}

}

